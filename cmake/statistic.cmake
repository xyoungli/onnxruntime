function(onnxruntime_print_statistic)
  message(STATUS "")
  message(STATUS "================================ configuration ==================================")
  message(STATUS "${Green}General:${ColourReset}")
  message(STATUS "  panter version            : ${BoldWhite}${PTH_VERSION}${ColourReset}")
  message(STATUS "  System                    : ${BoldWhite}${CMAKE_SYSTEM_NAME}${ColourReset}")
  message(STATUS "  C++ compiler              : ${BoldWhite}${CMAKE_CXX_COMPILER}${ColourReset}")
  message(STATUS "  C flags                   : ${CMAKE_C_FLAGS}")
  message(STATUS "  CXX flags                 : ${CMAKE_CXX_FLAGS}")
  message(STATUS "  Build type                : ${BoldWhite}${CMAKE_BUILD_TYPE}${ColourReset}")
  message(STATUS "  DEV mode                  : ${BoldWhite}${onnxruntime_DEV_MODE}${ColourReset}")
  message(STATUS "  Build cross plantform     : ${CMAKE_CROSSCOMPILING}")
  message(STATUS "  Enable verbose message    : ${onnxruntime_ENABLE_VERBOSE}")
  message(STATUS "")
  message(STATUS "  Build static libs         : TRUE")
  if(onnxruntime_BUILD_SHARED_LIB)
    message(STATUS "  Build shared libs         : TRUE")
  endif()
  message(STATUS "  Build with unit test      : ${onnxruntime_BUILD_UNIT_TESTS}")
  message(STATUS "")
#  message(STATUS "  Enable noisy warnings     : ${ENABLE_NOISY_WARNINGS}")
#  message(STATUS "  Disable all warnings      : ${DISABLE_ALL_WARNINGS}")
  message(STATUS "")
#  if(USE_GLOG)
#    message(STATUS "  USE_GLOG                  : ${USE_GLOG}")
#  else()
#    message(STATUS "  Use local logger          : logger")
#  endif()
#  if(USE_PROTOBUF)
#    message(STATUS "  Use google protobuf       : ${USE_PROTOBUF}")
#  endif()
#
#  if(USE_GTEST)
#    message(STATUS "  USE_GTEST                 : ${USE_GTEST}")
#  else()
#    message(STATUS "  Use local Unit test       : aktest")
#  endif()
#
#  message(STATUS "  USE_OPENCV                : ${USE_OPENCV}")
#  if(USE_OPENCV)
#    message(STATUS "    `-- OpenCV version      : ${OpenCV_VERSION}")
#  endif()
#
#  message(STATUS "  USE_BOOST                 : ${USE_BOOST}")
#  if(USE_BOOST)
#    message(STATUS "    `--Boost version        : ${BOOST_VERSION}")
#  endif()
#
#  if(USE_MKL)
#    message(STATUS "  USE Intel(R) MKL          : ${USE_MKL}")
#  endif()

  message(STATUS "  USE_OPENMP                : ${onnxruntime_USE_OPENMP}")
  if(onnxruntime_USE_OPENMP)
    message(STATUS "    `--Openmp version       : ${OPENMP_VERSION}")
  endif()

  if(onnxruntime_USE_CUDA)
    message(STATUS "")
    message(STATUS "${Green}Cuda:${ColourReset}")
    message(STATUS "  USE_CUDA                  : ${onnxruntime_USE_CUDA}")
    if(USE_CUDA)
      message(STATUS "    |--CUDA version         : ${CUDA_VERSION}")
      message(STATUS "    `--NVCC flags           : ${CUDA_NVCC_FLAGS}")
    endif()
    message(STATUS "  USE_CUDNN                 : ${onnxruntime_USE_CUDNN}")
    if(USE_CUDNN)
      message(STATUS "    `--Cudnn version        : ${Cudnn_VERSION}")
    endif()
  endif()

  message(STATUS "")
  if(onnxruntime_USE_CUDA)
    message(STATUS "  SELECT_GPU_PLACE          : ${onnxruntime_USE_CUDA}")
  elseif(onnxruntime_USE_ARM)
    message(STATUS "  USE_ARM                   : ${onnxruntime_USE_ARM}")
    message(STATUS "    `--ENABLE DOT           : ${onnxruntime_USE_ARM_DOTPROD}")
    if(CMAKE_SYSTEM_NAME STREQUAL "Android")
      message(STATUS "    `--Target Android       : TRUE")
      message(STATUS "    `--Android ABI          : ${ANDROID_ABI}")
      message(STATUS "    `--WITH_NEON            : ${ANDROID_ARM_NEON}")
      message(STATUS "    `--Android STL          : ${ANDROID_STL}")
      message(STATUS "    `--Android API          : ${ANDROID_NATIVE_API_LEVEL}")
    else()
      message(STATUS "    `--Target IOS           : ${TARGET_IOS}")
    endif()
  else()
    message(STATUS "  SELECT_X86_PLACE          : TRUE")
  endif()

  message(STATUS "")
  message(STATUS "  Configuation path         : ${PROJECT_BINARY_DIR}/onnxruntime_config.h")
  message(STATUS "================================ End ==================================")
endfunction()